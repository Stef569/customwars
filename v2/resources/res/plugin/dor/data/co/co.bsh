// CO scripts
// All method consists of 2 parts: <co name>_<method name>
// The syntax is based on Java, more info @ http://www.beanshell.org/manual/syntax.html
// When a method is to be linked to a co simply prefix the method with the co name in lower case.
// The parameters are java objects that can be used within the method.
// Use out.println("your text"); to print a message on the console.

// Available CO methods:
// Method name                     Parameters
//
// int unitMovementHook            Unit mover, int movement
// int getAttackBonusPercentage    Unit attacker, Unit defender
// int getDefenseBonusPercentage   Unit attacker, Unit defender
// int captureRateHook             int captureRate
// int cityFundsHook               int funds
// int unitPriceHook               int price
// int healRateHook                int healRate
// int terrainDefenseHook          int terrainDefenseBonus
// int fireRangeHook               int fireRange, Unit unit
// int visionHook                  int vision, Unit unit
// void dayStart                   Player player
// void power                      Game game
// void superPower                 Game game
// bool piercingVision

  public int brenner_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone())
      return 110;
    else
      return 100;
  }

  public int brenner_getDefenseBonusPercentage() {
    if (power || attacker.isInCOZone())
      return 130;
    else
      return 100;
  }

  public void brenner_power() {
    for (Unit unit : game.activePlayer.army) {
      if(!unit.hasMaxHP()) unit.addHp(3);
    }
  }

  public int caulder_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone())
      return 160;
    else
      return 100;
  }

  public int caulder_getDefenseBonusPercentage() {
    if (power || attacker.isInCOZone())
      return 160;
    else
      return 100;
  }

  public void caulder_dayStart() {
    for (Unit unit : player.army) {
      if (unit.isInCOZone() && !unit.hasMaxHP()) {
        unit.heal(5);
        out.println("Caulder day start: Healed unit " + unit.stats.name + " hp+5");
      }
    }
  }

  public int gage_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone()) {
      if (attacker.isInDirect() || attacker.isNaval()) {
        return 130;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int gage_getDefenseBonusPercentage() {
    if (power || defender.isInCOZone()) {
      if (defender.isInDirect() || defender.isNaval()) {
        return 120;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int gage_fireRangeHook() {
    if (power && unit.isInDirect())
      return fireRange + 2;
    else
      return fireRange;
  }

  public int greyfield_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone()) {
      if (attacker.isNaval() ||
        attacker.stats.name.equals("bcopter") ||
        attacker.stats.name.equals("tcopter") ||
        attacker.stats.name.equals("ship_plane")) {
        return 120;
      }else{
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int greyfield_getDefenseBonusPercentage() {
    if (power || defender.isInCOZone()) {
      if (attacker.isNaval() ||
        attacker.stats.name.equals("bcopter") ||
        attacker.stats.name.equals("tcopter") ||
        attacker.stats.name.equals("ship_plane"))  {
        return 150;
      }else{
        return 110;
      }
    } else {
      return 100;
    }
  }

  public void greyfield_power() {
    for (Unit unit : game.activePlayer.army) {
      unit.resupply();
      unit.setMaxConstructionMaterials();
    }
  }

  public int isabella_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone())
      return 120;
    else
      return 100;
  }

  public int isabella_getDefenseBonusPercentage() {
    if (power || defender.isInCOZone())
      return 120;
    else
      return 100;
  }

  public int isabella_unitMovementHook() {
    if (power)
      return movement + 2;
    else
      return movement;
  }

  public int isabella_fireRangeHook() {
    if (power && unit.isInDirect())
      return fireRange + 2;
    else
      return fireRange;
  }
  
  public int tabitha_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone()) {
      return 150;
    } else {
      return 100;
    }
  }

  public int tabitha_getDefenseBonusPercentage() {
    if (power || defender.isInCOZone())
      return 150;
    else
      return 100;
  }

  public void tabitha_power() {
    // todo showLaunchRocketCursor
  }

  public int lin_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone()) {
      if (attacker.isLand()) {
        return 130;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int lin_getDefenseBonusPercentage() {
    if (power || attacker.isInCOZone()) {
      if (attacker.isLand()) {
        return 130;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int lin_unitVisionHook() {
    if (power && unit.isLand())
      return vision + 2;
    else
      return vision;
  }

  public boolean lin_piercingVision() {
    return power;
  }

  public int penny_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone())
      return 110;
    else
      return 100;
  }

  public int penny_getDefenseBonusPercentage() {
    if (power || attacker.isInCOZone())
      return 110;
    else
      return 100;
  }

  public void power() {
    // todo weather
    game.startWeather(3, 3);
  }

  public int tasha_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone()) {
      if (attacker.isAir()) {
        return 150;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int tasha_getDefenseBonusPercentage() {
    if (power || defender.isInCOZone()) {
      if (attacker.isAir()) {
        return 130;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int tasha_unitMovementHook() {
    if (power && unit.isAir())
      return movement + 2;
    else
      return movement;
  }

  public int waylon_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone()) {
      if (attacker.isAir()) {
        return 130;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int waylon_getDefenseBonusPercentage() {
    if (power || defender.isInCOZone()) {
      if (attacker.isAir()) {
        return 420;
      } else if (defender.isAir()) {
        return 140;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int will_getAttackBonusPercentage() {
    if (power || attacker.isInCOZone()) {
      if (attacker.isDirect()) {
        return 130;
      } else {
        return 110;
      }
    } else {
      return 100;
    }
  }

  public int will_getDefenseBonusPercentage() {
    if (power || defender.isInCOZone())
      return 110;
    else
      return 100;
  }

  public int will_unitMovementHook() {
    if (power && unit.isDirect())
      return movement + 2;
    else
      return movement;
  }